"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CredentialPlugins = void 0;
const util_1 = require("util");
const logging_1 = require("../../logging");
const plugin_1 = require("../plugin");
const provider_caching_1 = require("./provider-caching");
/**
 * Cache for credential providers.
 *
 * Given an account and an operating mode (read or write) will return an
 * appropriate credential provider for credentials for the given account. The
 * credential provider will be cached so that multiple AWS clients for the same
 * environment will not make multiple network calls to obtain credentials.
 *
 * Will use default credentials if they are for the right account; otherwise,
 * all loaded credential provider plugins will be tried to obtain credentials
 * for the given account.
 */
class CredentialPlugins {
    constructor(host) {
        this.cache = {};
        this.host = host ?? plugin_1.PluginHost.instance;
    }
    async fetchCredentialsFor(awsAccountId, mode) {
        const key = `${awsAccountId}-${mode}`;
        if (!(key in this.cache)) {
            this.cache[key] = await this.lookupCredentials(awsAccountId, mode);
        }
        return this.cache[key];
    }
    get availablePluginNames() {
        return this.host.credentialProviderSources.map((s) => s.name);
    }
    async lookupCredentials(awsAccountId, mode) {
        const triedSources = [];
        // Otherwise, inspect the various credential sources we have
        for (const source of this.host.credentialProviderSources) {
            let available;
            try {
                available = await source.isAvailable();
            }
            catch (e) {
                // This shouldn't happen, but let's guard against it anyway
                (0, logging_1.warning)(`Uncaught exception in ${source.name}: ${e.message}`);
                available = false;
            }
            if (!available) {
                (0, logging_1.debug)('Credentials source %s is not available, ignoring it.', source.name);
                continue;
            }
            triedSources.push(source);
            let canProvide;
            try {
                canProvide = await source.canProvideCredentials(awsAccountId);
            }
            catch (e) {
                // This shouldn't happen, but let's guard against it anyway
                (0, logging_1.warning)(`Uncaught exception in ${source.name}: ${e.message}`);
                canProvide = false;
            }
            if (!canProvide) {
                continue;
            }
            (0, logging_1.debug)(`Using ${source.name} credentials for account ${awsAccountId}`);
            return {
                credentials: await v3ProviderFromPlugin(() => source.getProvider(awsAccountId, mode, {
                    supportsV3Providers: true,
                })),
                pluginName: source.name,
            };
        }
        return undefined;
    }
}
exports.CredentialPlugins = CredentialPlugins;
/**
 * Take a function that calls the plugin, and turn it into an SDKv3-compatible credential provider.
 *
 * What we will do is the following:
 *
 * - Query the plugin and see what kind of result it gives us.
 * - If the result is self-refreshing or doesn't need refreshing, we turn it into an SDKv3 provider
 *   and return it directly.
 *   * If the underlying return value is a provider, we will make it a caching provider
 *     (because we can't know if it will cache by itself or not).
 *   * If the underlying return value is a static credential, caching isn't relevant.
 *   * If the underlying return value is V2 credentials, those have caching built-in.
 * - If the result is a static credential that expires, we will wrap it in an SDKv3 provider
 *   that will query the plugin again when the credential expires.
 */
async function v3ProviderFromPlugin(producer) {
    const initial = await producer();
    if (isV3Provider(initial)) {
        // Already a provider, make caching
        return (0, provider_caching_1.makeCachingProvider)(initial);
    }
    else if (isV3Credentials(initial) && initial.expiration === undefined) {
        // Static credentials that don't need refreshing nor caching
        return () => Promise.resolve(initial);
    }
    else if (isV3Credentials(initial) && initial.expiration !== undefined) {
        // Static credentials that do need refreshing and caching
        return refreshFromPluginProvider(initial, producer);
    }
    else if (isV2Credentials(initial)) {
        // V2 credentials that refresh and cache themselves
        return v3ProviderFromV2Credentials(initial);
    }
    else {
        throw new Error(`Plugin returned a value that doesn't resemble AWS credentials: ${(0, util_1.inspect)(initial)}`);
    }
}
/**
 * Converts a V2 credential into a V3-compatible provider
 */
function v3ProviderFromV2Credentials(x) {
    return async () => {
        // Get will fetch or refresh as necessary
        await x.getPromise();
        return {
            accessKeyId: x.accessKeyId,
            secretAccessKey: x.secretAccessKey,
            sessionToken: x.sessionToken,
            expiration: x.expireTime,
        };
    };
}
function refreshFromPluginProvider(current, producer) {
    return async () => {
        // eslint-disable-next-line no-console
        console.error(current, Date.now());
        if ((0, provider_caching_1.credentialsAboutToExpire)(current)) {
            const newCreds = await producer();
            if (!isV3Credentials(newCreds)) {
                throw new Error(`Plugin initially returned static V3 credentials but now returned something else: ${(0, util_1.inspect)(newCreds)}`);
            }
            current = newCreds;
        }
        return current;
    };
}
function isV3Provider(x) {
    return typeof x === 'function';
}
function isV2Credentials(x) {
    return !!(x && typeof x === 'object' && x.getPromise);
}
function isV3Credentials(x) {
    return !!(x && typeof x === 'object' && x.accessKeyId && !isV2Credentials(x));
}
//# sourceMappingURL=data:application/json;base64,