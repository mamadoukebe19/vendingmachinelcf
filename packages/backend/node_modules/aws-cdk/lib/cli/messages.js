"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.trace = exports.debug = exports.info = exports.warn = exports.result = exports.error = void 0;
/**
 * Internal helper that processes log inputs into a consistent format.
 * Handles string interpolation, format strings, and object parameter styles.
 * Applies optional styling and prepares the final message for logging.
 */
function formatMessage(msg, category = 'TOOLKIT') {
    return {
        time: new Date(),
        level: msg.level,
        action: msg.action,
        code: msg.code ?? defaultMessageCode(msg.level, category),
        message: msg.message,
        data: msg.data,
    };
}
/**
 * Build a message code from level and category. The code must be valid for this function to pass.
 * Otherwise it returns a ToolkitError.
 */
function defaultMessageCode(level, category = 'TOOLKIT') {
    const levelIndicator = level === 'error' ? 'E' :
        level === 'warn' ? 'W' :
            'I';
    return `CDK_${category}_${levelIndicator}0000`;
}
/**
 * Creates an error level message.
 * Errors must always have a unique code.
 */
const error = (action, message, code, payload) => {
    return formatMessage({
        level: 'error',
        action,
        code,
        message,
        data: payload,
    });
};
exports.error = error;
/**
 * Creates a result level message and represents the most important message for a given action.
 *
 * They should be used sparsely, with an action usually having no or exactly one result.
 * However actions that operate on Cloud Assemblies might include a result per Stack.
 * Unlike other messages, results must always have a code and a payload.
 */
const result = (action, message, code, payload) => {
    return formatMessage({
        level: 'result',
        action,
        code,
        message,
        data: payload,
    });
};
exports.result = result;
/**
 * Creates a warning level message.
 */
const warn = (action, message, code, payload) => {
    return formatMessage({
        level: 'warn',
        action,
        code,
        message,
        data: payload,
    });
};
exports.warn = warn;
/**
 * Creates an info level message.
 */
const info = (action, message, code, payload) => {
    return formatMessage({
        level: 'info',
        action,
        code,
        message,
        data: payload,
    });
};
exports.info = info;
/**
 * Creates a debug level message.
 */
const debug = (action, message, code, payload) => {
    return formatMessage({
        level: 'debug',
        action,
        code,
        message,
        data: payload,
    });
};
exports.debug = debug;
/**
 * Creates a trace level message.
 */
const trace = (action, message, code, payload) => {
    return formatMessage({
        level: 'trace',
        action,
        code,
        message,
        data: payload,
    });
};
exports.trace = trace;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtZXNzYWdlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFTQTs7OztHQUlHO0FBQ0gsU0FBUyxhQUFhLENBQUksR0FBMkMsRUFBRSxXQUFrQyxTQUFTO0lBQ2hILE9BQU87UUFDTCxJQUFJLEVBQUUsSUFBSSxJQUFJLEVBQUU7UUFDaEIsS0FBSyxFQUFFLEdBQUcsQ0FBQyxLQUFLO1FBQ2hCLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTTtRQUNsQixJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksSUFBSSxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQztRQUN6RCxPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU87UUFDcEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO0tBQ2YsQ0FBQztBQUNKLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxTQUFTLGtCQUFrQixDQUFDLEtBQXFCLEVBQUUsV0FBa0MsU0FBUztJQUM1RixNQUFNLGNBQWMsR0FBRyxLQUFLLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QyxLQUFLLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN0QixHQUFHLENBQUM7SUFDUixPQUFPLE9BQU8sUUFBUSxJQUFJLGNBQWMsTUFBTSxDQUFDO0FBQ2pELENBQUM7QUFFRDs7O0dBR0c7QUFDSSxNQUFNLEtBQUssR0FBRyxDQUFJLE1BQXFCLEVBQUUsT0FBZSxFQUFFLElBQW1CLEVBQUUsT0FBVyxFQUFFLEVBQUU7SUFDbkcsT0FBTyxhQUFhLENBQUM7UUFDbkIsS0FBSyxFQUFFLE9BQU87UUFDZCxNQUFNO1FBQ04sSUFBSTtRQUNKLE9BQU87UUFDUCxJQUFJLEVBQUUsT0FBTztLQUNkLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQVJXLFFBQUEsS0FBSyxTQVFoQjtBQUVGOzs7Ozs7R0FNRztBQUNJLE1BQU0sTUFBTSxHQUFHLENBQUksTUFBcUIsRUFBRSxPQUFlLEVBQUUsSUFBbUIsRUFBRSxPQUFVLEVBQUUsRUFBRTtJQUNuRyxPQUFPLGFBQWEsQ0FBQztRQUNuQixLQUFLLEVBQUUsUUFBUTtRQUNmLE1BQU07UUFDTixJQUFJO1FBQ0osT0FBTztRQUNQLElBQUksRUFBRSxPQUFPO0tBQ2QsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBUlcsUUFBQSxNQUFNLFVBUWpCO0FBRUY7O0dBRUc7QUFDSSxNQUFNLElBQUksR0FBRyxDQUFJLE1BQXFCLEVBQUUsT0FBZSxFQUFFLElBQW9CLEVBQUUsT0FBVyxFQUFFLEVBQUU7SUFDbkcsT0FBTyxhQUFhLENBQUM7UUFDbkIsS0FBSyxFQUFFLE1BQU07UUFDYixNQUFNO1FBQ04sSUFBSTtRQUNKLE9BQU87UUFDUCxJQUFJLEVBQUUsT0FBTztLQUNkLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQVJXLFFBQUEsSUFBSSxRQVFmO0FBRUY7O0dBRUc7QUFDSSxNQUFNLElBQUksR0FBRyxDQUFJLE1BQXFCLEVBQUUsT0FBZSxFQUFFLElBQW9CLEVBQUUsT0FBVyxFQUFFLEVBQUU7SUFDbkcsT0FBTyxhQUFhLENBQUM7UUFDbkIsS0FBSyxFQUFFLE1BQU07UUFDYixNQUFNO1FBQ04sSUFBSTtRQUNKLE9BQU87UUFDUCxJQUFJLEVBQUUsT0FBTztLQUNkLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQVJXLFFBQUEsSUFBSSxRQVFmO0FBRUY7O0dBRUc7QUFDSSxNQUFNLEtBQUssR0FBRyxDQUFJLE1BQXFCLEVBQUUsT0FBZSxFQUFFLElBQW9CLEVBQUUsT0FBVyxFQUFFLEVBQUU7SUFDcEcsT0FBTyxhQUFhLENBQUM7UUFDbkIsS0FBSyxFQUFFLE9BQU87UUFDZCxNQUFNO1FBQ04sSUFBSTtRQUNKLE9BQU87UUFDUCxJQUFJLEVBQUUsT0FBTztLQUNkLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQVJXLFFBQUEsS0FBSyxTQVFoQjtBQUVGOztHQUVHO0FBQ0ksTUFBTSxLQUFLLEdBQUcsQ0FBSSxNQUFxQixFQUFFLE9BQWUsRUFBRSxJQUFvQixFQUFFLE9BQVcsRUFBRSxFQUFFO0lBQ3BHLE9BQU8sYUFBYSxDQUFDO1FBQ25CLEtBQUssRUFBRSxPQUFPO1FBQ2QsTUFBTTtRQUNOLElBQUk7UUFDSixPQUFPO1FBQ1AsSUFBSSxFQUFFLE9BQU87S0FDZCxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFSVyxRQUFBLEtBQUssU0FRaEIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgaXMgYSBiYWNrcG9ydCBmcm9tIEBhd3MtY2RrL3Rvb2xraXQuXG4vLyBUaGUgQ0xJIGNhbm5vdCBkZXBlbmQgb24gdGhlIHRvb2xraXQgeWV0LCBiZWNhdXNlIHRoZSB0b29sa2l0IGN1cnJlbnRseSBkZXBlbmRzIG9uIHRoZSBDTEkuXG4vLyBPbmNlIHdlIGhhdmUgY29tcGxldGUgdGhlIHJlcG8gc3BsaXQsIHdlIHdpbGwgY3JlYXRlIGEgdGVtcG9yYXJ5LCBwcml2YXRlIGxpYnJhcnkgcGFja2FnZVxuLy8gZm9yIGFsbCBjb2RlIHRoYXQgaXMgc2hhcmVkIGJldHdlZW4gQ0xJIGFuZCB0b29sa2l0LiBUaGlzIGlzIHdoZXJlIHRoaXMgZmlsZSB3aWxsIHRoZW4gbGl2ZS5cbmltcG9ydCB7IElvTWVzc2FnZSwgSW9NZXNzYWdlQ29kZSwgSW9NZXNzYWdlQ29kZUNhdGVnb3J5LCBJb01lc3NhZ2VMZXZlbCwgVG9vbGtpdEFjdGlvbiB9IGZyb20gJy4uL3Rvb2xraXQvY2xpLWlvLWhvc3QnO1xuXG50eXBlIE9wdGlvbmFsPFQsIEsgZXh0ZW5kcyBrZXlvZiBUPiA9IFBpY2s8UGFydGlhbDxUPiwgSz4gJiBPbWl0PFQsIEs+O1xudHlwZSBTaW1wbGlmaWVkTWVzc2FnZTxUPiA9IE9taXQ8SW9NZXNzYWdlPFQ+LCAndGltZSc+O1xuXG4vKipcbiAqIEludGVybmFsIGhlbHBlciB0aGF0IHByb2Nlc3NlcyBsb2cgaW5wdXRzIGludG8gYSBjb25zaXN0ZW50IGZvcm1hdC5cbiAqIEhhbmRsZXMgc3RyaW5nIGludGVycG9sYXRpb24sIGZvcm1hdCBzdHJpbmdzLCBhbmQgb2JqZWN0IHBhcmFtZXRlciBzdHlsZXMuXG4gKiBBcHBsaWVzIG9wdGlvbmFsIHN0eWxpbmcgYW5kIHByZXBhcmVzIHRoZSBmaW5hbCBtZXNzYWdlIGZvciBsb2dnaW5nLlxuICovXG5mdW5jdGlvbiBmb3JtYXRNZXNzYWdlPFQ+KG1zZzogT3B0aW9uYWw8U2ltcGxpZmllZE1lc3NhZ2U8VD4sICdjb2RlJz4sIGNhdGVnb3J5OiBJb01lc3NhZ2VDb2RlQ2F0ZWdvcnkgPSAnVE9PTEtJVCcpOiBJb01lc3NhZ2U8VD4ge1xuICByZXR1cm4ge1xuICAgIHRpbWU6IG5ldyBEYXRlKCksXG4gICAgbGV2ZWw6IG1zZy5sZXZlbCxcbiAgICBhY3Rpb246IG1zZy5hY3Rpb24sXG4gICAgY29kZTogbXNnLmNvZGUgPz8gZGVmYXVsdE1lc3NhZ2VDb2RlKG1zZy5sZXZlbCwgY2F0ZWdvcnkpLFxuICAgIG1lc3NhZ2U6IG1zZy5tZXNzYWdlLFxuICAgIGRhdGE6IG1zZy5kYXRhLFxuICB9O1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgbWVzc2FnZSBjb2RlIGZyb20gbGV2ZWwgYW5kIGNhdGVnb3J5LiBUaGUgY29kZSBtdXN0IGJlIHZhbGlkIGZvciB0aGlzIGZ1bmN0aW9uIHRvIHBhc3MuXG4gKiBPdGhlcndpc2UgaXQgcmV0dXJucyBhIFRvb2xraXRFcnJvci5cbiAqL1xuZnVuY3Rpb24gZGVmYXVsdE1lc3NhZ2VDb2RlKGxldmVsOiBJb01lc3NhZ2VMZXZlbCwgY2F0ZWdvcnk6IElvTWVzc2FnZUNvZGVDYXRlZ29yeSA9ICdUT09MS0lUJyk6IElvTWVzc2FnZUNvZGUge1xuICBjb25zdCBsZXZlbEluZGljYXRvciA9IGxldmVsID09PSAnZXJyb3InID8gJ0UnIDpcbiAgICBsZXZlbCA9PT0gJ3dhcm4nID8gJ1cnIDpcbiAgICAgICdJJztcbiAgcmV0dXJuIGBDREtfJHtjYXRlZ29yeX1fJHtsZXZlbEluZGljYXRvcn0wMDAwYDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGVycm9yIGxldmVsIG1lc3NhZ2UuXG4gKiBFcnJvcnMgbXVzdCBhbHdheXMgaGF2ZSBhIHVuaXF1ZSBjb2RlLlxuICovXG5leHBvcnQgY29uc3QgZXJyb3IgPSA8VD4oYWN0aW9uOiBUb29sa2l0QWN0aW9uLCBtZXNzYWdlOiBzdHJpbmcsIGNvZGU6IElvTWVzc2FnZUNvZGUsIHBheWxvYWQ/OiBUKSA9PiB7XG4gIHJldHVybiBmb3JtYXRNZXNzYWdlKHtcbiAgICBsZXZlbDogJ2Vycm9yJyxcbiAgICBhY3Rpb24sXG4gICAgY29kZSxcbiAgICBtZXNzYWdlLFxuICAgIGRhdGE6IHBheWxvYWQsXG4gIH0pO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgcmVzdWx0IGxldmVsIG1lc3NhZ2UgYW5kIHJlcHJlc2VudHMgdGhlIG1vc3QgaW1wb3J0YW50IG1lc3NhZ2UgZm9yIGEgZ2l2ZW4gYWN0aW9uLlxuICpcbiAqIFRoZXkgc2hvdWxkIGJlIHVzZWQgc3BhcnNlbHksIHdpdGggYW4gYWN0aW9uIHVzdWFsbHkgaGF2aW5nIG5vIG9yIGV4YWN0bHkgb25lIHJlc3VsdC5cbiAqIEhvd2V2ZXIgYWN0aW9ucyB0aGF0IG9wZXJhdGUgb24gQ2xvdWQgQXNzZW1ibGllcyBtaWdodCBpbmNsdWRlIGEgcmVzdWx0IHBlciBTdGFjay5cbiAqIFVubGlrZSBvdGhlciBtZXNzYWdlcywgcmVzdWx0cyBtdXN0IGFsd2F5cyBoYXZlIGEgY29kZSBhbmQgYSBwYXlsb2FkLlxuICovXG5leHBvcnQgY29uc3QgcmVzdWx0ID0gPFQ+KGFjdGlvbjogVG9vbGtpdEFjdGlvbiwgbWVzc2FnZTogc3RyaW5nLCBjb2RlOiBJb01lc3NhZ2VDb2RlLCBwYXlsb2FkOiBUKSA9PiB7XG4gIHJldHVybiBmb3JtYXRNZXNzYWdlKHtcbiAgICBsZXZlbDogJ3Jlc3VsdCcsXG4gICAgYWN0aW9uLFxuICAgIGNvZGUsXG4gICAgbWVzc2FnZSxcbiAgICBkYXRhOiBwYXlsb2FkLFxuICB9KTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIHdhcm5pbmcgbGV2ZWwgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHdhcm4gPSA8VD4oYWN0aW9uOiBUb29sa2l0QWN0aW9uLCBtZXNzYWdlOiBzdHJpbmcsIGNvZGU/OiBJb01lc3NhZ2VDb2RlLCBwYXlsb2FkPzogVCkgPT4ge1xuICByZXR1cm4gZm9ybWF0TWVzc2FnZSh7XG4gICAgbGV2ZWw6ICd3YXJuJyxcbiAgICBhY3Rpb24sXG4gICAgY29kZSxcbiAgICBtZXNzYWdlLFxuICAgIGRhdGE6IHBheWxvYWQsXG4gIH0pO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGluZm8gbGV2ZWwgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGluZm8gPSA8VD4oYWN0aW9uOiBUb29sa2l0QWN0aW9uLCBtZXNzYWdlOiBzdHJpbmcsIGNvZGU/OiBJb01lc3NhZ2VDb2RlLCBwYXlsb2FkPzogVCkgPT4ge1xuICByZXR1cm4gZm9ybWF0TWVzc2FnZSh7XG4gICAgbGV2ZWw6ICdpbmZvJyxcbiAgICBhY3Rpb24sXG4gICAgY29kZSxcbiAgICBtZXNzYWdlLFxuICAgIGRhdGE6IHBheWxvYWQsXG4gIH0pO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVidWcgbGV2ZWwgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGRlYnVnID0gPFQ+KGFjdGlvbjogVG9vbGtpdEFjdGlvbiwgbWVzc2FnZTogc3RyaW5nLCBjb2RlPzogSW9NZXNzYWdlQ29kZSwgcGF5bG9hZD86IFQpID0+IHtcbiAgcmV0dXJuIGZvcm1hdE1lc3NhZ2Uoe1xuICAgIGxldmVsOiAnZGVidWcnLFxuICAgIGFjdGlvbixcbiAgICBjb2RlLFxuICAgIG1lc3NhZ2UsXG4gICAgZGF0YTogcGF5bG9hZCxcbiAgfSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSB0cmFjZSBsZXZlbCBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgdHJhY2UgPSA8VD4oYWN0aW9uOiBUb29sa2l0QWN0aW9uLCBtZXNzYWdlOiBzdHJpbmcsIGNvZGU/OiBJb01lc3NhZ2VDb2RlLCBwYXlsb2FkPzogVCkgPT4ge1xuICByZXR1cm4gZm9ybWF0TWVzc2FnZSh7XG4gICAgbGV2ZWw6ICd0cmFjZScsXG4gICAgYWN0aW9uLFxuICAgIGNvZGUsXG4gICAgbWVzc2FnZSxcbiAgICBkYXRhOiBwYXlsb2FkLFxuICB9KTtcbn07XG5cbiJdfQ==