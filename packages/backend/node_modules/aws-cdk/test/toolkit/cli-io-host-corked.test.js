"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logging_1 = require("../../lib/logging");
const cli_io_host_1 = require("../../lib/toolkit/cli-io-host");
const ioHost = cli_io_host_1.CliIoHost.instance({}, true);
let mockStderr;
const stripAnsi = (str) => {
    const ansiRegex = /\u001b\[[0-9;]*[a-zA-Z]/g;
    return str.replace(ansiRegex, '');
};
beforeEach(() => {
    ioHost.logLevel = 'info';
    ioHost.isCI = false;
    mockStderr = jest.fn();
    jest.spyOn(process.stderr, 'write').mockImplementation((chunk) => {
        mockStderr(stripAnsi(chunk.toString()));
        return true;
    });
});
afterEach(() => {
    jest.restoreAllMocks();
});
describe('corked logging', () => {
    test('buffers messages when corked', async () => {
        await ioHost.withCorkedLogging(async () => {
            (0, logging_1.info)('message 1');
            (0, logging_1.info)({ message: 'message 2' });
            expect(mockStderr).not.toHaveBeenCalled();
        });
        expect(mockStderr).toHaveBeenCalledWith('message 1\n');
        expect(mockStderr).toHaveBeenCalledWith('message 2\n');
    });
    test('handles nested corking correctly', async () => {
        await ioHost.withCorkedLogging(async () => {
            (0, logging_1.info)('outer 1');
            await ioHost.withCorkedLogging(async () => {
                (0, logging_1.info)({ message: 'inner' });
            });
            (0, logging_1.info)({ message: 'outer 2' });
            expect(mockStderr).not.toHaveBeenCalled();
        });
        expect(mockStderr).toHaveBeenCalledTimes(3);
        expect(mockStderr).toHaveBeenCalledWith('outer 1\n');
        expect(mockStderr).toHaveBeenCalledWith('inner\n');
        expect(mockStderr).toHaveBeenCalledWith('outer 2\n');
    });
    test('handles errors in corked block while preserving buffer', async () => {
        await expect(ioHost.withCorkedLogging(async () => {
            (0, logging_1.info)('message 1');
            throw new Error('test error');
        })).rejects.toThrow('test error');
        // The buffered message should still be printed even if the block throws
        expect(mockStderr).toHaveBeenCalledWith('message 1\n');
    });
    test('maintains correct order with mixed log levels in corked block', async () => {
        // Set threshold to debug to allow debug messages
        ioHost.logLevel = 'debug';
        await ioHost.withCorkedLogging(async () => {
            (0, logging_1.error)('error message');
            (0, logging_1.warning)('warning message');
            (0, logging_1.success)('success message');
            (0, logging_1.debug)('debug message');
        });
        const calls = mockStderr.mock.calls.map(call => call[0]);
        expect(calls).toEqual([
            'error message\n',
            'warning message\n',
            'success message\n',
            expect.stringMatching(/^\[\d{2}:\d{2}:\d{2}\] debug message\n$/),
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLWlvLWhvc3QtY29ya2VkLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjbGktaW8taG9zdC1jb3JrZWQudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUF5RTtBQUN6RSwrREFBMEQ7QUFFMUQsTUFBTSxNQUFNLEdBQUcsdUJBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzVDLElBQUksVUFBcUIsQ0FBQztBQUUxQixNQUFNLFNBQVMsR0FBRyxDQUFDLEdBQVcsRUFBVSxFQUFFO0lBQ3hDLE1BQU0sU0FBUyxHQUFHLDBCQUEwQixDQUFDO0lBQzdDLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDcEMsQ0FBQyxDQUFDO0FBRUYsVUFBVSxDQUFDLEdBQUcsRUFBRTtJQUNkLE1BQU0sQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO0lBQ3pCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO0lBRXBCLFVBQVUsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7SUFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUU7UUFDcEUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILFNBQVMsQ0FBQyxHQUFHLEVBQUU7SUFDYixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDekIsQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO0lBQzlCLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxLQUFLLElBQUksRUFBRTtR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QixtQkFBbUI7WUFDbkIsbUJBQW1CO1lBQ25CLE1BQU0sQ0FBQyxjQUFjLENBQUMseUNBQXlDLENBQUM7U0FDakUsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlYnVnLCBlcnJvciwgaW5mbywgc3VjY2Vzcywgd2FybmluZyB9IGZyb20gJy4uLy4uL2xpYi9sb2dnaW5nJztcbmltcG9ydCB7IENsaUlvSG9zdCB9IGZyb20gJy4uLy4uL2xpYi90b29sa2l0L2NsaS1pby1ob3N0JztcblxuY29uc3QgaW9Ib3N0ID0gQ2xpSW9Ib3N0Lmluc3RhbmNlKHt9LCB0cnVlKTtcbmxldCBtb2NrU3RkZXJyOiBqZXN0Lk1vY2s7XG5cbmNvbnN0IHN0cmlwQW5zaSA9IChzdHI6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIGNvbnN0IGFuc2lSZWdleCA9IC9cXHUwMDFiXFxbWzAtOTtdKlthLXpBLVpdL2c7XG4gIHJldHVybiBzdHIucmVwbGFjZShhbnNpUmVnZXgsICcnKTtcbn07XG5cbmJlZm9yZUVhY2goKCkgPT4ge1xuICBpb0hvc3QubG9nTGV2ZWwgPSAnaW5mbyc7XG4gIGlvSG9zdC5pc0NJID0gZmFsc2U7XG5cbiAgbW9ja1N0ZGVyciA9IGplc3QuZm4oKTtcbiAgamVzdC5zcHlPbihwcm9jZXNzLnN0ZGVyciwgJ3dyaXRlJykubW9ja0ltcGxlbWVudGF0aW9uKChjaHVuazogYW55KSA9PiB7XG4gICAgbW9ja1N0ZGVycihzdHJpcEFuc2koY2h1bmsudG9TdHJpbmcoKSkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbn0pO1xuXG5hZnRlckVhY2goKCkgPT4ge1xuICBqZXN0LnJlc3RvcmVBbGxNb2NrcygpO1xufSk7XG5cbmRlc2NyaWJlKCdjb3JrZWQgbG9nZ2luZycsICgpID0+IHtcbiAgdGVzdCgnYnVmZmVycyBtZXNzYWdlcyB3aGVuIGNvcmtlZCcsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBpb0hvc3Qud2l0aENvcmtlZExvZ2dpbmcoYXN5bmMgKCkgPT4ge1xuICAgICAgaW5mbygnbWVzc2FnZSAxJyk7XG4gICAgICBpbmZvKHsgbWVzc2FnZTogJ21lc3NhZ2UgMicgfSk7XG4gICAgICBleHBlY3QobW9ja1N0ZGVycikubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChtb2NrU3RkZXJyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnbWVzc2FnZSAxXFxuJyk7XG4gICAgZXhwZWN0KG1vY2tTdGRlcnIpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdtZXNzYWdlIDJcXG4nKTtcbiAgfSk7XG5cbiAgdGVzdCgnaGFuZGxlcyBuZXN0ZWQgY29ya2luZyBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgaW9Ib3N0LndpdGhDb3JrZWRMb2dnaW5nKGFzeW5jICgpID0+IHtcbiAgICAgIGluZm8oJ291dGVyIDEnKTtcbiAgICAgIGF3YWl0IGlvSG9zdC53aXRoQ29ya2VkTG9nZ2luZyhhc3luYyAoKSA9PiB7XG4gICAgICAgIGluZm8oeyBtZXNzYWdlOiAnaW5uZXInIH0pO1xuICAgICAgfSk7XG4gICAgICBpbmZvKHsgbWVzc2FnZTogJ291dGVyIDInIH0pO1xuICAgICAgZXhwZWN0KG1vY2tTdGRlcnIpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBleHBlY3QobW9ja1N0ZGVycikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDMpO1xuICAgIGV4cGVjdChtb2NrU3RkZXJyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnb3V0ZXIgMVxcbicpO1xuICAgIGV4cGVjdChtb2NrU3RkZXJyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnaW5uZXJcXG4nKTtcbiAgICBleHBlY3QobW9ja1N0ZGVycikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ291dGVyIDJcXG4nKTtcbiAgfSk7XG5cbiAgdGVzdCgnaGFuZGxlcyBlcnJvcnMgaW4gY29ya2VkIGJsb2NrIHdoaWxlIHByZXNlcnZpbmcgYnVmZmVyJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGV4cGVjdChpb0hvc3Qud2l0aENvcmtlZExvZ2dpbmcoYXN5bmMgKCkgPT4ge1xuICAgICAgaW5mbygnbWVzc2FnZSAxJyk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Rlc3QgZXJyb3InKTtcbiAgICB9KSkucmVqZWN0cy50b1Rocm93KCd0ZXN0IGVycm9yJyk7XG5cbiAgICAvLyBUaGUgYnVmZmVyZWQgbWVzc2FnZSBzaG91bGQgc3RpbGwgYmUgcHJpbnRlZCBldmVuIGlmIHRoZSBibG9jayB0aHJvd3NcbiAgICBleHBlY3QobW9ja1N0ZGVycikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ21lc3NhZ2UgMVxcbicpO1xuICB9KTtcblxuICB0ZXN0KCdtYWludGFpbnMgY29ycmVjdCBvcmRlciB3aXRoIG1peGVkIGxvZyBsZXZlbHMgaW4gY29ya2VkIGJsb2NrJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIFNldCB0aHJlc2hvbGQgdG8gZGVidWcgdG8gYWxsb3cgZGVidWcgbWVzc2FnZXNcbiAgICBpb0hvc3QubG9nTGV2ZWwgPSAnZGVidWcnO1xuXG4gICAgYXdhaXQgaW9Ib3N0LndpdGhDb3JrZWRMb2dnaW5nKGFzeW5jICgpID0+IHtcbiAgICAgIGVycm9yKCdlcnJvciBtZXNzYWdlJyk7XG4gICAgICB3YXJuaW5nKCd3YXJuaW5nIG1lc3NhZ2UnKTtcbiAgICAgIHN1Y2Nlc3MoJ3N1Y2Nlc3MgbWVzc2FnZScpO1xuICAgICAgZGVidWcoJ2RlYnVnIG1lc3NhZ2UnKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGNhbGxzID0gbW9ja1N0ZGVyci5tb2NrLmNhbGxzLm1hcChjYWxsID0+IGNhbGxbMF0pO1xuICAgIGV4cGVjdChjYWxscykudG9FcXVhbChbXG4gICAgICAnZXJyb3IgbWVzc2FnZVxcbicsXG4gICAgICAnd2FybmluZyBtZXNzYWdlXFxuJyxcbiAgICAgICdzdWNjZXNzIG1lc3NhZ2VcXG4nLFxuICAgICAgZXhwZWN0LnN0cmluZ01hdGNoaW5nKC9eXFxbXFxkezJ9OlxcZHsyfTpcXGR7Mn1cXF0gZGVidWcgbWVzc2FnZVxcbiQvKSxcbiAgICBdKTtcbiAgfSk7XG59KTtcbiJdfQ==