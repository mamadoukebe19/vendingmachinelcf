"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable import/order */
const os = require("os");
const fs_path = require("path");
const fs = require("fs-extra");
const user_configuration_1 = require("../../lib/cli/user-configuration");
const parse_command_line_arguments_1 = require("../../lib/cli/parse-command-line-arguments");
// mock fs deeply
jest.mock('fs-extra');
const mockedFs = jest.mocked(fs, { shallow: true });
const USER_CONFIG = fs_path.join(os.homedir(), '.cdk.json');
test('load settings from both files if available', async () => {
    // GIVEN
    const GIVEN_CONFIG = new Map([
        [user_configuration_1.PROJECT_CONFIG, {
                project: 'foobar',
            }],
        [USER_CONFIG, {
                project: 'foo',
                test: 'bar',
            }],
    ]);
    // WHEN
    mockedFs.pathExists.mockImplementation(path => {
        return GIVEN_CONFIG.has(path);
    });
    mockedFs.readJSON.mockImplementation(path => {
        return GIVEN_CONFIG.get(path);
    });
    const config = await new user_configuration_1.Configuration().load();
    // THEN
    expect(config.settings.get(['project'])).toBe('foobar');
    expect(config.settings.get(['test'])).toBe('bar');
});
test('load context from all 3 files if available', async () => {
    // GIVEN
    const GIVEN_CONFIG = new Map([
        [user_configuration_1.PROJECT_CONFIG, {
                context: {
                    project: 'foobar',
                },
            }],
        [user_configuration_1.PROJECT_CONTEXT, {
                foo: 'bar',
            }],
        [USER_CONFIG, {
                context: {
                    test: 'bar',
                },
            }],
    ]);
    // WHEN
    mockedFs.pathExists.mockImplementation(path => {
        return GIVEN_CONFIG.has(path);
    });
    mockedFs.readJSON.mockImplementation(path => {
        return GIVEN_CONFIG.get(path);
    });
    const config = await new user_configuration_1.Configuration().load();
    // THEN
    expect(config.context.get('project')).toBe('foobar');
    expect(config.context.get('foo')).toBe('bar');
    expect(config.context.get('test')).toBe('bar');
});
test('throws an error if the `build` key is specified in the user config', async () => {
    // GIVEN
    const GIVEN_CONFIG = new Map([
        [USER_CONFIG, {
                build: 'foobar',
            }],
    ]);
    // WHEN
    mockedFs.pathExists.mockImplementation(path => {
        return GIVEN_CONFIG.has(path);
    });
    mockedFs.readJSON.mockImplementation(path => {
        return GIVEN_CONFIG.get(path);
    });
    // THEN
    await expect(new user_configuration_1.Configuration().load()).rejects.toEqual(new Error('The `build` key cannot be specified in the user config (~/.cdk.json), specify it in the project config (cdk.json) instead'));
});
test('Can specify the `quiet` key in the user config', async () => {
    // GIVEN
    const GIVEN_CONFIG = new Map([
        [USER_CONFIG, {
                quiet: true,
            }],
    ]);
    // WHEN
    mockedFs.pathExists.mockImplementation(path => {
        return GIVEN_CONFIG.has(path);
    });
    mockedFs.readJSON.mockImplementation(path => {
        return GIVEN_CONFIG.get(path);
    });
    // THEN
    const config = await new user_configuration_1.Configuration().load();
    expect(config.settings.get(['quiet'])).toBe(true);
});
test('array settings are not overridden by yarg defaults', async () => {
    // GIVEN
    const GIVEN_CONFIG = new Map([
        [user_configuration_1.PROJECT_CONFIG, {
                plugin: ['dummy'],
            }],
    ]);
    const argsWithPlugin = await (0, parse_command_line_arguments_1.parseCommandLineArguments)(['ls', '--plugin', '[]']);
    const argsWithoutPlugin = await (0, parse_command_line_arguments_1.parseCommandLineArguments)(['ls']);
    // WHEN
    mockedFs.pathExists.mockImplementation(path => {
        return GIVEN_CONFIG.has(path);
    });
    mockedFs.readJSON.mockImplementation(path => {
        return GIVEN_CONFIG.get(path);
    });
    const configWithPlugin = await new user_configuration_1.Configuration({
        commandLineArguments: argsWithPlugin,
    }).load();
    const configWithoutPlugin = await new user_configuration_1.Configuration({
        commandLineArguments: argsWithoutPlugin,
    }).load();
    // THEN
    expect(configWithPlugin.settings.get(['plugin'])).toEqual(['[]']);
    expect(configWithoutPlugin.settings.get(['plugin'])).toEqual(['dummy']);
});
//# sourceMappingURL=data:application/json;base64,