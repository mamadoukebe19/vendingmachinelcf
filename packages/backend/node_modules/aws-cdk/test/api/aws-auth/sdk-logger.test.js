"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sdk_logger_1 = require("../../../lib/api/aws-auth/sdk-logger");
describe(sdk_logger_1.SdkToCliLogger, () => {
    const ioHost = {
        notify: jest.fn(),
        requestResponse: jest.fn(),
    };
    const logger = new sdk_logger_1.SdkToCliLogger(ioHost);
    beforeEach(() => {
        ioHost.notify.mockReset();
    });
    test.each(['trace', 'debug'])('%s method does not call notify', (method) => {
        logger[method]('SDK Logger test message');
        expect(ioHost.notify).not.toHaveBeenCalled();
    });
    test.each(['info', 'warn', 'error'])('%s method logs to notify', (method) => {
        logger[method]('SDK Logger test message');
        expect(ioHost.notify).toHaveBeenCalledWith(expect.objectContaining({
            level: 'trace',
            message: `[SDK ${method}] SDK Logger test message`,
        }));
    });
});
const SUCCESS_CALL = {
    clientName: 'S3Client',
    commandName: 'GetBucketLocationCommand',
    input: {
        Bucket: '.....',
        ExpectedBucketOwner: undefined,
    },
    output: { LocationConstraint: 'eu-central-1' },
    metadata: {
        httpStatusCode: 200,
        requestId: '....',
        extendedRequestId: '...',
        cfId: undefined,
        attempts: 2,
        totalRetryDelay: 30,
    },
};
const ERROR_CALL = {
    clientName: 'S3Client',
    commandName: 'GetBucketLocationCommand',
    input: {
        Bucket: '.....',
        ExpectedBucketOwner: undefined,
    },
    error: new Error('it failed'),
    metadata: {
        httpStatusCode: 200,
        attempts: 2,
        totalRetryDelay: 30,
    },
};
test('formatting a successful SDK call looks broadly reasonable', () => {
    const output = (0, sdk_logger_1.formatSdkLoggerContent)([SUCCESS_CALL]);
    expect(output).toMatchSnapshot();
});
test('formatting a failing SDK call looks broadly reasonable', () => {
    const output = (0, sdk_logger_1.formatSdkLoggerContent)([ERROR_CALL]);
    expect(output).toMatchSnapshot();
});
test('formatting a successful SDK call includes attempts and retries if greater than 1', () => {
    const output = (0, sdk_logger_1.formatSdkLoggerContent)([SUCCESS_CALL]);
    expect(output).toContain('2 attempts');
    expect(output).toContain('30ms');
});
test('formatting a failing SDK call includes attempts and retries if greater than 1', () => {
    const output = (0, sdk_logger_1.formatSdkLoggerContent)([ERROR_CALL]);
    expect(output).toContain('2 attempts');
    expect(output).toContain('30ms');
});
test('formatting a failing SDK call includes the error', () => {
    const output = (0, sdk_logger_1.formatSdkLoggerContent)([ERROR_CALL]);
    expect(output).toContain('it failed');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2RrLWxvZ2dlci50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2RrLWxvZ2dlci50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscUVBQThGO0FBRTlGLFFBQVEsQ0FBQywyQkFBYyxFQUFFLEdBQUcsRUFBRTtJQUM1QixNQUFNLE1BQU0sR0FBRztRQUNiLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2pCLGVBQWUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0tBQzNCLENBQUM7SUFDRixNQUFNLE1BQU0sR0FBRyxJQUFJLDJCQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFMUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDNUIsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBZ0MsQ0FBQyxDQUFDLGdDQUFnQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDeEcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDMUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMvQyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBZ0MsQ0FBQyxDQUFDLDBCQUEwQixFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDekcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDMUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7WUFDakUsS0FBSyxFQUFFLE9BQU87WUFDZCxPQUFPLEVBQUUsUUFBUSxNQUFNLDJCQUEyQjtTQUNuRCxDQUFDLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLFlBQVksR0FBRztJQUNuQixVQUFVLEVBQUUsVUFBVTtJQUN0QixXQUFXLEVBQUUsMEJBQTBCO0lBQ3ZDLEtBQUssRUFBRTtRQUNMLE1BQU0sRUFBRSxPQUFPO1FBQ2YsbUJBQW1CLEVBQUUsU0FBUztLQUMvQjtJQUNELE1BQU0sRUFBRSxFQUFFLGtCQUFrQixFQUFFLGNBQWMsRUFBRTtJQUM5QyxRQUFRLEVBQUU7UUFDUixjQUFjLEVBQUUsR0FBRztRQUNuQixTQUFTLEVBQUUsTUFBTTtRQUNqQixpQkFBaUIsRUFBRSxLQUFLO1FBQ3hCLElBQUksRUFBRSxTQUFTO1FBQ2YsUUFBUSxFQUFFLENBQUM7UUFDWCxlQUFlLEVBQUUsRUFBRTtLQUNwQjtDQUNGLENBQUM7QUFFRixNQUFNLFVBQVUsR0FBRztJQUNqQixVQUFVLEVBQUUsVUFBVTtJQUN0QixXQUFXLEVBQUUsMEJBQTBCO0lBQ3ZDLEtBQUssRUFBRTtRQUNMLE1BQU0sRUFBRSxPQUFPO1FBQ2YsbUJBQW1CLEVBQUUsU0FBUztLQUMvQjtJQUNELEtBQUssRUFBRSxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUM7SUFDN0IsUUFBUSxFQUFFO1FBQ1IsY0FBYyxFQUFFLEdBQUc7UUFDbkIsUUFBUSxFQUFFLENBQUM7UUFDWCxlQUFlLEVBQUUsRUFBRTtLQUNwQjtDQUNGLENBQUM7QUFFRixJQUFJLENBQUMsMkRBQTJELEVBQUUsR0FBRyxFQUFFO0lBQ3JFLE1BQU0sTUFBTSxHQUFHLElBQUEsbUNBQXNCLEVBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQ3RELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUNuQyxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyx3REFBd0QsRUFBRSxHQUFHLEVBQUU7SUFDbEUsTUFBTSxNQUFNLEdBQUcsSUFBQSxtQ0FBc0IsRUFBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDcEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ25DLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGtGQUFrRixFQUFFLEdBQUcsRUFBRTtJQUM1RixNQUFNLE1BQU0sR0FBRyxJQUFBLG1DQUFzQixFQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUN0RCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbkMsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsK0VBQStFLEVBQUUsR0FBRyxFQUFFO0lBQ3pGLE1BQU0sTUFBTSxHQUFHLElBQUEsbUNBQXNCLEVBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQ3BELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdkMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNuQyxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxrREFBa0QsRUFBRSxHQUFHLEVBQUU7SUFDNUQsTUFBTSxNQUFNLEdBQUcsSUFBQSxtQ0FBc0IsRUFBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDcEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN4QyxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvcm1hdFNka0xvZ2dlckNvbnRlbnQsIFNka1RvQ2xpTG9nZ2VyIH0gZnJvbSAnLi4vLi4vLi4vbGliL2FwaS9hd3MtYXV0aC9zZGstbG9nZ2VyJztcblxuZGVzY3JpYmUoU2RrVG9DbGlMb2dnZXIsICgpID0+IHtcbiAgY29uc3QgaW9Ib3N0ID0ge1xuICAgIG5vdGlmeTogamVzdC5mbigpLFxuICAgIHJlcXVlc3RSZXNwb25zZTogamVzdC5mbigpLFxuICB9O1xuICBjb25zdCBsb2dnZXIgPSBuZXcgU2RrVG9DbGlMb2dnZXIoaW9Ib3N0KTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBpb0hvc3Qubm90aWZ5Lm1vY2tSZXNldCgpO1xuICB9KTtcblxuICB0ZXN0LmVhY2goWyd0cmFjZScsICdkZWJ1ZyddIGFzIEFycmF5PGtleW9mIFNka1RvQ2xpTG9nZ2VyPikoJyVzIG1ldGhvZCBkb2VzIG5vdCBjYWxsIG5vdGlmeScsIChtZXRob2QpID0+IHtcbiAgICBsb2dnZXJbbWV0aG9kXSgnU0RLIExvZ2dlciB0ZXN0IG1lc3NhZ2UnKTtcbiAgICBleHBlY3QoaW9Ib3N0Lm5vdGlmeSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgdGVzdC5lYWNoKFsnaW5mbycsICd3YXJuJywgJ2Vycm9yJ10gYXMgQXJyYXk8a2V5b2YgU2RrVG9DbGlMb2dnZXI+KSgnJXMgbWV0aG9kIGxvZ3MgdG8gbm90aWZ5JywgKG1ldGhvZCkgPT4ge1xuICAgIGxvZ2dlclttZXRob2RdKCdTREsgTG9nZ2VyIHRlc3QgbWVzc2FnZScpO1xuICAgIGV4cGVjdChpb0hvc3Qubm90aWZ5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICBsZXZlbDogJ3RyYWNlJyxcbiAgICAgIG1lc3NhZ2U6IGBbU0RLICR7bWV0aG9kfV0gU0RLIExvZ2dlciB0ZXN0IG1lc3NhZ2VgLFxuICAgIH0pKTtcbiAgfSk7XG59KTtcblxuY29uc3QgU1VDQ0VTU19DQUxMID0ge1xuICBjbGllbnROYW1lOiAnUzNDbGllbnQnLFxuICBjb21tYW5kTmFtZTogJ0dldEJ1Y2tldExvY2F0aW9uQ29tbWFuZCcsXG4gIGlucHV0OiB7XG4gICAgQnVja2V0OiAnLi4uLi4nLFxuICAgIEV4cGVjdGVkQnVja2V0T3duZXI6IHVuZGVmaW5lZCxcbiAgfSxcbiAgb3V0cHV0OiB7IExvY2F0aW9uQ29uc3RyYWludDogJ2V1LWNlbnRyYWwtMScgfSxcbiAgbWV0YWRhdGE6IHtcbiAgICBodHRwU3RhdHVzQ29kZTogMjAwLFxuICAgIHJlcXVlc3RJZDogJy4uLi4nLFxuICAgIGV4dGVuZGVkUmVxdWVzdElkOiAnLi4uJyxcbiAgICBjZklkOiB1bmRlZmluZWQsXG4gICAgYXR0ZW1wdHM6IDIsXG4gICAgdG90YWxSZXRyeURlbGF5OiAzMCxcbiAgfSxcbn07XG5cbmNvbnN0IEVSUk9SX0NBTEwgPSB7XG4gIGNsaWVudE5hbWU6ICdTM0NsaWVudCcsXG4gIGNvbW1hbmROYW1lOiAnR2V0QnVja2V0TG9jYXRpb25Db21tYW5kJyxcbiAgaW5wdXQ6IHtcbiAgICBCdWNrZXQ6ICcuLi4uLicsXG4gICAgRXhwZWN0ZWRCdWNrZXRPd25lcjogdW5kZWZpbmVkLFxuICB9LFxuICBlcnJvcjogbmV3IEVycm9yKCdpdCBmYWlsZWQnKSxcbiAgbWV0YWRhdGE6IHtcbiAgICBodHRwU3RhdHVzQ29kZTogMjAwLFxuICAgIGF0dGVtcHRzOiAyLFxuICAgIHRvdGFsUmV0cnlEZWxheTogMzAsXG4gIH0sXG59O1xuXG50ZXN0KCdmb3JtYXR0aW5nIGEgc3VjY2Vzc2Z1bCBTREsgY2FsbCBsb29rcyBicm9hZGx5IHJlYXNvbmFibGUnLCAoKSA9PiB7XG4gIGNvbnN0IG91dHB1dCA9IGZvcm1hdFNka0xvZ2dlckNvbnRlbnQoW1NVQ0NFU1NfQ0FMTF0pO1xuICBleHBlY3Qob3V0cHV0KS50b01hdGNoU25hcHNob3QoKTtcbn0pO1xuXG50ZXN0KCdmb3JtYXR0aW5nIGEgZmFpbGluZyBTREsgY2FsbCBsb29rcyBicm9hZGx5IHJlYXNvbmFibGUnLCAoKSA9PiB7XG4gIGNvbnN0IG91dHB1dCA9IGZvcm1hdFNka0xvZ2dlckNvbnRlbnQoW0VSUk9SX0NBTExdKTtcbiAgZXhwZWN0KG91dHB1dCkudG9NYXRjaFNuYXBzaG90KCk7XG59KTtcblxudGVzdCgnZm9ybWF0dGluZyBhIHN1Y2Nlc3NmdWwgU0RLIGNhbGwgaW5jbHVkZXMgYXR0ZW1wdHMgYW5kIHJldHJpZXMgaWYgZ3JlYXRlciB0aGFuIDEnLCAoKSA9PiB7XG4gIGNvbnN0IG91dHB1dCA9IGZvcm1hdFNka0xvZ2dlckNvbnRlbnQoW1NVQ0NFU1NfQ0FMTF0pO1xuICBleHBlY3Qob3V0cHV0KS50b0NvbnRhaW4oJzIgYXR0ZW1wdHMnKTtcbiAgZXhwZWN0KG91dHB1dCkudG9Db250YWluKCczMG1zJyk7XG59KTtcblxudGVzdCgnZm9ybWF0dGluZyBhIGZhaWxpbmcgU0RLIGNhbGwgaW5jbHVkZXMgYXR0ZW1wdHMgYW5kIHJldHJpZXMgaWYgZ3JlYXRlciB0aGFuIDEnLCAoKSA9PiB7XG4gIGNvbnN0IG91dHB1dCA9IGZvcm1hdFNka0xvZ2dlckNvbnRlbnQoW0VSUk9SX0NBTExdKTtcbiAgZXhwZWN0KG91dHB1dCkudG9Db250YWluKCcyIGF0dGVtcHRzJyk7XG4gIGV4cGVjdChvdXRwdXQpLnRvQ29udGFpbignMzBtcycpO1xufSk7XG5cbnRlc3QoJ2Zvcm1hdHRpbmcgYSBmYWlsaW5nIFNESyBjYWxsIGluY2x1ZGVzIHRoZSBlcnJvcicsICgpID0+IHtcbiAgY29uc3Qgb3V0cHV0ID0gZm9ybWF0U2RrTG9nZ2VyQ29udGVudChbRVJST1JfQ0FMTF0pO1xuICBleHBlY3Qob3V0cHV0KS50b0NvbnRhaW4oJ2l0IGZhaWxlZCcpO1xufSk7XG4iXX0=